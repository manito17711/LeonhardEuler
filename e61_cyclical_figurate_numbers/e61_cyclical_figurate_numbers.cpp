/*
	Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers 
	and are generated by the following formulae:

	Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
	Square	 		P4,n=n2	 	1, 4, 9, 16, 25, ...
	Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
	Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
	Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
	Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
	The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

	The set is cyclic, in that the last two digits of each number is the first two digits of the next number
	 (including the last number with the first).
	Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented 
	 by a different number in the set.
	This is the only set of 4-digit numbers with this property.
	Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
	 triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/

#include "stdafx.h"
#include <iostream>
#include <vector>

using namespace std;

typedef int(*func_ptr) (int n);

int f_tri(int n) { return n * (n + 1) / 2; }
int f_squ(int n) { return n * n; }
int f_pen(int n) { return n * (3 * n - 1) / 2; }
int f_hex(int n) { return n * (2 * n - 1); }
int f_hep(int n) { return n * (5 * n - 3) / 2; }
int f_oct(int n) { return n * (3 * n - 2); }

const vector<func_ptr> functions{ f_tri, f_squ, f_pen, f_hex, f_hep, f_oct };

void find_next_func(vector<func_ptr> functions, int num, vector<int> result);

int main()
{
	int n = 1, m = 0;
	while ((m = functions[0](n++)) < 9999)
	{
		if (m > 1000)
		{
			vector<int> result { m };
			vector<func_ptr> f = functions;
			f.erase(f.begin());

			find_next_func(f, m % 100, result);
		}
	}

	return 0;
}

void find_next_func(vector<func_ptr> func_arr, int num, vector<int> result)
{
	if (result.size() == functions.size())
	{
		if (result[0] / 100 == result[result.size() - 1] % 100)
		{
			int sum = 0;
			for (size_t i = 0; i < result.size(); i++)
			{
				cout << result[i] << " ";
				sum += result[i];
			}

			cout << endl << "Sum: " << sum << endl;
		}
	}
	else
	{
		for (size_t i = 0; i < func_arr.size(); i++)
		{
			int n = 1, m = 0;
			while ((m = func_arr[i](n++)) < 9999)
			{
				if (m > 1000 && (m / 100) == num)
				{
					result.push_back(m);
					vector<func_ptr> f = func_arr;
					f.erase(f.begin() + i);

					find_next_func(f, m % 100, result);
					result.pop_back();
				}
			}
		}
	}
}
